source("corr.R")
cr<-corr("specdata",5000)
str(cr)
cr==num[1:332,0]
a<-cr==[1:332,0]
source("corr.R")
cr<-corr("specdata",5000)
cr
summary(cr)
str(cr)
cr<-corr("specdata",400)
summary(cr)
?count
is.na(cr)
source("corr.R")
cr<-corr("specdata",400)
cr
summary(cr)
cr<-corr("specdata",5000)
cr
summary(cr)
na(cr)
is.na(cr)
length(cr)
sum(is.na(record))
sum(is.na(cr))
source("corr.R")
cr<-corr("specdata",5000)
summary(cr)
str(cr)
cr<-corr("specdata",400)
summary(cr)
cr<-corr("specdata")
cr<-corr("specdata")
cr<-corr("specdata",400)
summary(cr)
cr<-corr("specdata")
corr
source("corr.R")
cr<-corr("specdata")
summary(cr)
length(cr)
source("corr.R")
cr<-corr("specdata")
summary(cr)
cr<-corr("specdata",400)
summary(cr)
cr
cr<-corr("specdata")
cr
cr<-corr("specdata",400)
cr
ls
ls()
clear
clear()
ls()
rm(list=ls(all=TRUE))
ls()
source("corr.R")
corr
cr<-corr("specdata",400)
source("corr.R")
?rm
ls()
rm("corr")
ls()
source("corr.R")
ls()
corr
cr<-corr("specdata")
summary(cr)
cr
source("corr.R")
source("corr.R")
cr<-corr("specdata")
summary(cr)
cr
record<-NULL
record
str(record)
source("corr.R")
cr<-corr("specdata")
summary(cr)
source("corr.R")
source("corr.R")
cr<-corr("specdata")
source("corr.R")
cr<-corr("specdata")
cr<-corr("specdata")
file_list<-list.files(directory, full.names=TRUE)
file_list<-list.files("specdata",full.names=TRUE)
file_list
x<-read.csv(file_list[1])
x
sum(complete.cases(x))
cor{x[,"nitrate"],x[,"sulfate"],use="complete.obs"]
cor(x[,"nitrate"],x[,"sulfate"],use="complete.obs")
source("corr.R")
cr<-corr("specdata")
summary(cr)
sum(complete.cases(x))
cr<-corr("specdata",400)
summary(cr)
cr
head(cr)
cr<-corr("specdata",5000)
summary(cr)
str(cr)
cr<-corr("specdata")
length(cr)
submit()
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
cube<-function(x,n){x^3}
cube(3)
x<-1:10
if(x>5){x<-0}
f<-function(x){g<-function(y){y+z}z<-4 x+g(x)}
f<-function(x){g<-function(y){y+z}z<-4 x+g(x)}
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(d)
f(3)
library(datasets)
data(iris)
iris
str(iris)
mean(iris$Sepal.Length)
apply(iris, 1,mean)
apply(iris[,1:4],2,mean)
apply(iris, 2, mean)
colMeans(iris)
data(mtcars)
tapply(mtcars$cyl,mycars$mpg, mean)
tapply(mtcars$cyl,mtcars$mpg, mean)
tapply(mtcars$mpg,mtcars$cyl, mean)
x<-tapply(mtcars$mpg,mtcars$cyl, mean)
x
dim(x)
range(x)
x[1]-x[3]
debug(ls)
ls
mean(iris$Sepal.Length)
out
n
escape
)
debug
n
n
n
n
n
n
n
n
n
n
exit
help
Q
rowMeans(iris[,1:4])
colmeans(iris)
colMeans(iris)
apply(iris, [,1:4],2,mean)
apply(iris[,1:4],2,mean)
apply(mtcars,2,mean)
mean(mtcars$mpg,mtcars$cyl)
split(mtcars,mycars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
x<-with(mtcars, tapply(mpg, cyl, mean))
x[1]-x[3]
str(iris)
split(iris,Species)
split(iris, iris$Species)
with(iris(tapply(Sepal.Length, Species, mean))
with(iris
)
with(iris,tapply(Sepal.Length, Species, mean))
apply(iris[1,:4],2,mean)
apply(iris[,1:4],2,mean)
str(mtcars)
with(mtcars,tapply(hp,cyl,mean))
x<-with(mtcars,tapply(hp,cyl,mean))
min(x)-max(x)
get<-function()x
get
source("cachematrix.R")
source("cachematrix.R")
getwd()
source"('ProgrammingAssignment2\cachematrix.R")
chgwd("ProgrammingAssignment2")
source("cachematrix.R")
?matrix
Q
?matrix
ls
ls()
ls()q
Q
?matrix
help
f
f
f
Q
ls()
Q
makeCacheMatrix(1:10,2,5)
makeCacheMatrix(matrix(1:10,2,5))
source("cachematrix.R")
makeCacheMatrix(matrix(1:10,2,5))
source("cachematrix.R")
makeCacheMatrix(matrix(1:10,2,5))
makeCacheMatrix
source("cachematrix.R")
makeCacheMatrix(matrix(1:10,2,5))
makeCacheMatrix
ls()
Q
cacheSolve(1:10)
debug(cacheSolve)
cacheSolve(1:10)
n
get(cacheSolve)
?get
cacheSolve(1:10)
undebug(cacheSolve)
Q
undebug(cacheSolve)
undebug(cachematrix)
undebug(makeCacheMatrix)
ls()
undebug(ls())
Q
undebug(ls)
ls
ls()
makeCacheMatrix(1:10)
source("cachemean.R")
cachemean(5)
cachemean(1:5)
ls()
makeVector()
cachemean
cachemean()
cachemean(1:5)
makeVector(1:5)
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
x
ls()
?clear
?rm
rm(x,y,z,f,corr,cr,cube,iris,mtcars)
ls()
         makeVector <- function(x = numeric()) {
+         m <- NULL
+         set <- function(y) {
+                 x <<- y
+                 m <<- NULL
+         }
+         get <- function() x
+         setmean <- function(mean) m <<- mean
+         getmean <- function() m
+         list(set = set, get = get,
+              setmean = setmean,
+              getmean = getmean)
+ }
 makeVector <- function(x = numeric()) {
+         m <- NULL
+         set <- function(y) {
+                 x <<- y
+                 m <<- NULL
+         }
+         get <- function() x
+         setmean <- function(mean) m <<- mean
+         getmean <- function() m
+         list(set = set, get = get,
+              setmean = setmean,
+              getmean = getmean)
+ }
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
ls()
m<-NULL
set<-function(y){x<<-y m<<-NULL}
set<-function(y){
x<<-y
m<<-NULL
}
ls9)
ls()
get<-function()X
get<-function()x
get
setmean<-function(mean)m<<-mean
setmean
getmean<-function(),
getmean<-function()m
list(set=set,get=get,setmean=setmean,getmean=getmean)
list
ls()
m
m<-x$getmean
args(makeVector)
args(cachemean)
cachemean(vector(1:10,2,5))
cachemean(matrix(1:10,2,5))
x<-matrix(1:10,2,5)
s
x
cachemean(x)
cachemean(c(1,2,3,4))
class(x)
class(c(1,2,3,4))
x<-makeVector(matrix(1:10,2,5))
x
cachemean(x)
x<--makeCacheMatrix(matrix(1:10,2,5))
x<-makeCacheMatrix(marix(1:10,2,5))
x
cacheSolve(x)
ls()
rm(x, record, m, set, get, file_list, setmean,getmean)
ls9)
ls()
x<-makeCacheMatrix(matrix(1:10,2,5))
cacheSolve(x)
ls
ls()
x
solve(1:4)
solve(matrix(1:4,2,2))
x<-makeCacheMatrix(c(1,2,3,4))
cacheSolve(x)
x<-matrix(1:4,2,2)
makeCacheMatrix(x)
cacheSolve(x)
x
solve(matrix(1:4,2,2))
a<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
a<-makeCacheMatrix(matrix(2:5,2,2))
cacheSolve(a)
a$set(matrix(3:6,2,2))
cacheSolve(a)
a$get()
a$getinverse()
a$setinverse(matrix(3:6,2,2))
a$getinverse
a$getinverse()
cachesolve(a)
cacheSolve(a)
a$getinverse()
a<-makeCacheMatrix(matrix(2:5,2,2))
cacheSolve(a)
cacheSolve(a)
a<-makeCacheMatrix(matrix(2:5,2,2))
cacheSolve(a)
a<-makeCacheMatrix(matrix(1:9,3,3))
a
x<-matrix(1:9,3,3)
makeCacheMatrix(x)
cacheSolve<-function(x,...){
m<-x$getinverse}
m
x
getinverse
xfunction()
debug(cacheSolve)
cacheSolve(x)
n
n
n
cacheSolve(a)
Q
source(
)
source("cachematrix.R")
source("cachematrix.R")
x<-makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(x)
n
x
matrix(1:9,3,3)
x<-makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(x)
x<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(x)
x<-makeCacheMatrix(matrix(1:16,4,4))
cacheSolve(x)
x<-makeCacheMatrix(matrix(2:17,4,4))
cacheSolve(x)
x<-matrix(c(1,2),2,2)
x
x<-matrix(c(1,2),3,3)
x
x<-matrix(c(1,2),4,4)
x
x<-makeCacheMatrix(matrix(c(1,2),4,4))
x
cacheSolve(x)
x<-makeCacheMatrix(c(1,2,3),3,3)
x<-makeCacheMatrix(matrix(c(1,2,3),3,3))
x
cacheSolve(x)
x
x<-makeCacheMatrix(matrix(c(1,2,3),3,3))
matrix(c(1,2,3),3,3)
cacheSolve(x)
x<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(x)
x<-makeCacheMatrix(matrix(rnorm),3,3)
x<-makeCacheMatrix(matrix(rnorm(),3,3))
x
cacheSolve(x)
x<-makeCacheMatrix(matrix(rnorm(9),3,3))
cacheSolve(x)
matrix(rnorm(9),3,3)
x<-matrix(rnorm(9),3,3)
x
solve(x)
y<-solve(x)
x
y
solve(x)
solve(y)
debug(cacheSolve)
cacheSolve(x)
n
n
n
cacheSolve(x)
undebug(cacheSolve)
cacheSolve(x)
x
x<-makeCacheMatrix(matrix(rnorm(9),3,3))
x
debug(cacheSolve)
cacheSolve(x)
n
n
n
Q
get
?get
get(m)
print(x)
source("cachematrix.R")
makeCacheMatrix(matrix(rnorm(9),3,3))
x<-makeCacheMatrix(matrix(rnorm(9),3,3))
x
cacheSolve(x)
source("cachematrix.R")
cacheSolve(x)
source("cachematrix.R")
x<-makeCacheMatrix(matrix(c(rnorm(9),3,3))
)
x<-makeCacheMatrix(matrix(rnorm(9),3,3))
debug(cacheSolve)
cacheSolve(x)
n
n
n
Q
undebug(cacheSolve)
ls()
rm makeCacheMatrix
rm(makeCacheMatrix)
rm(a,x,y,submit)
ls()
source("cachemean.R")
source("cachematrix.R")
ls()
x<-makeCacheMatrix(matrix(rnorm(9),3,3))
cacheSolve(x)
q()
